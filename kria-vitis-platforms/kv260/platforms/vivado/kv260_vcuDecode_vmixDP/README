(C) Copyright 2020 - 2022 Xilinx, Inc.
SPDX-License-Identifier: Apache-2.0

The kv260_vcuDecode_vmixDP Vivado project is generated in this directory.
The kv260_vcuDecode_vmixDP design supports the following multimedia peripherals
and interfaces:

1. Ethernet PS interface for video streaming protocols like RTSP.
   Receive video stream over this interface.

2. Hardened Video Codec Unit (VCU) consisting of H264/H265 decoder
   supporting upto 4 streams.

3. DisplayPort and HDMI Tx via the PS DP stream interface and on-board
   DP splitter.

The Vivado block design (scripts/config_bd.tcl) defines the above
interfaces and peripherals. It also defines the Platform Interfaces
that acclerators can connect to.

Platform Interfaces supported:
******************************
* Clocks: clock_100M, clock_300M, and clock_600M  to drive clock inputs
          on the accelerator.
* Master AXI: M01_AXI to M15 _AXI AXI Memory Mapped master ports on
              axi_ic_accel_ctrl Interconnect to drive the accelerator's
              control port.
* Slave AXI:  S_AXI_HPC0_FPD, S_AXI_HP1_FPD, S_AXI_HP2_FPD and S_AXI_LPD AXI
              Memory Mapped slave ports driven by the accelerator's read/write
              data ports.
* Interrupts: pl_ps_irq0[7:0] for the accelerator to drive interrupt signals.

For more information on how to setup Platform Interfaces refer to Xilinx Vitis Unified
Software Platform Documentation(UG1393)


Set Board Preset:
*****************

To build platforms make sure to set the Vivado Board Preset using the
following steps

1. git clone https://github.com/Xilinx/XilinxBoardStore
2. Add the following line to Vivado initialization script
	set_param board.repoPaths {<path to the git repo>/boards/Xilinx}

The initialization tcl script for Vivado can be found at:

Linux: $HOME/.Xilinx/Vivado/Vivado_init.tcl
Windows: %APPDATA%/Roaming/Xilinx/Vivado/Vivado_init.tcl


Generate Extensible XSA :
*************************
An extensible XSA is required build a Vitis Platform which is in turn used to
integrate accelerators into the platform.

To build the XSA, run the following make command

> make xsa

The Makefile uses scripts/main.tcl file to create a vivado project, populate the
block design and finally build a XSA.

The generated XSA will be located at:

> ./project/kv260_vcuDecode_vmixDP.xsa


Modify the Vivado design:
*************************

To open the Vivado project run the following command from the
Vivado tcl console:

> open_project ./project/kv260_vcuDecode_vmixDP.xpr

The user can now modify the block design and run Vivado implementation
and bitstream generation in the Vivado cockpit.

To write out a new extensible platform XSA file, run the following
command from the Vivado tcl console:

> write_hw_platform -force -include_bit -file kv260_vcuDecode_vmixDP.xsa

The new XSA file can now be used replacing the existing XSA file in the Vitis
platform generation or as hardware handoff file inside the Petalinux project.

